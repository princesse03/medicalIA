import joblib
from flask import Flask, render_template, request, jsonify
import pandas as pd
import numpy as np
from termcolor import colored

app = Flask(__name__)

model = joblib.load('rf.pkl')

import pandas as pd
import joblib
from termcolor import colored

# Liste des maladies
maladies = [
    'Grippe', 'Rhume', 'Eczema', 'Asthme', 'Hyperthyroidie', 'Rhinite allergique',
    'Troubles anxieux', 'Diabete', 'Gastro-ent√©rite', 'Pancreatite', 'Polyarthrite rhumatoide',
    'Depression', 'Cancer du foie', 'AVC', 'Infection urinaire', 'Cancer du rein', 'Migraine',
    'Colite ulcereuse', 'Bronchite', 'Osteoporose', 'Pneumonie', 'Hypertension', 'Psoriasis',
    'Maladie du foie', 'Maladie renale', 'Arthrose', 'Hypothyroidism', 'Maladie de Crohn',
    'Maladie de Parkinson', "Maladie d'Alzheimer"
]

# Classification compl√®te de gravit√© avec recommandations
gravite_maladies = {
    # Urgences absolues (n√©cessitent une intervention imm√©diate)
    'AVC': {
        'niveau': 'urgence absolue',
        'conseils': [
            "APPELER LE 15 IMM√âDIATEMENT",
            "Ne pas donner √† manger ou boire",
            "Notez l'heure de d√©but des sympt√¥mes"
        ],
        'couleur': 'red'
    },
    'Pancreatite': {
        'niveau': 'urgence absolue',
        'conseils': [
            "Hospitalisation en urgence",
            "Je√ªne strict n√©cessaire",
            "Traitement antalgique en urgence"
        ],
        'couleur': 'red'
    },
    'Pneumonie': {
        'niveau': 'urgence',
        'conseils': [
            "Antibioth√©rapie urgente",
            "Hospitalisation si d√©tresse respiratoire",
            "Surveillance constante de la saturation"
        ],
        'couleur': 'red'
    },

    # Maladies graves (n√©cessitent une consultation rapide)
    'Asthme': {
        'niveau': 'grave',
        'conseils': [
            "Bronchodilatateur imm√©diat",
            "Consultation pneumologue sous 48h",
            "√âviter les facteurs d√©clenchants"
        ],
        'couleur': 'yellow'
    },
    'Diabete': {
        'niveau': 'grave',
        'conseils': [
            "Contr√¥le glyc√©mique imm√©diat",
            "Adaptation du traitement insulinique",
            "Consultation endocrinologue sous 7 jours"
        ],
        'couleur': 'yellow'
    },
    'Hypertension': {
        'niveau': 'grave',
        'conseils': [
            "Mesure tensionnelle r√©p√©t√©e",
            "R√©duction stricte du sel",
            "Consultation cardiologique sous 72h"
        ],
        'couleur': 'yellow'
    },

    # Maladies chroniques (prise en charge sp√©cialis√©e)
    'Cancer du foie': {
        'niveau': 'chronique grave',
        'conseils': [
            "Consultation oncologique urgente",
            "Bilan h√©patique complet",
            "Prise en charge multidisciplinaire"
        ],
        'couleur': 'magenta'
    },
    'Maladie de Parkinson': {
        'niveau': 'chronique',
        'conseils': [
            "Adaptation du traitement neurologique",
            "Kin√©sith√©rapie sp√©cialis√©e",
            "Consultation neurologique mensuelle"
        ],
        'couleur': 'magenta'
    },
    "Maladie d'Alzheimer": {
        'niveau': 'chronique',
        'conseils': [
            "√âvaluation g√©riatrique compl√®te",
            "Mise en place d'aides √† domicile",
            "Traitement sp√©cifique √† initier"
        ],
        'couleur': 'magenta'
    },

    # Maladies mod√©r√©es (consultation sous 15 jours)
    'Grippe': {
        'niveau': 'mod√©r√©',
        'conseils': [
            "Repos 5-7 jours",
            "Hydratation abondante",
            "Antipyr√©tiques si fi√®vre > 38.5¬∞C"
        ],
        'couleur': 'blue'
    },
    'Bronchite': {
        'niveau': 'mod√©r√©',
        'conseils': [
            "Arr√™t de travail si n√©cessaire",
            "Antitussifs si toux s√®che",
            "Consultation si persistance > 10 jours"
        ],
        'couleur': 'blue'
    },
    'Infection urinaire': {
        'niveau': 'mod√©r√©',
        'conseils': [
            "Antibioth√©rapie adapt√©e",
            "Hydratation intensive",
            "ECBU de contr√¥le"
        ],
        'couleur': 'blue'
    },

    # Maladies l√©g√®res (autogestion possible)
    'Rhume': {
        'niveau': 'l√©ger',
        'conseils': [
            "Lavages nasaux r√©guliers",
            "Repos 2-3 jours",
            "Pas d'antibiotiques n√©cessaires"
        ],
        'couleur': 'green'
    },
    'Eczema': {
        'niveau': 'l√©ger',
        'conseils': [
            "Emollients quotidiens",
            "Cortico√Ødes locaux si pouss√©e",
            "√âviction des allerg√®nes"
        ],
        'couleur': 'green'
    },
    'Migraine': {
        'niveau': 'l√©ger',
        'conseils': [
            "Triptans si diagnostiqu√©",
            "Repos dans le calme et l'obscurit√©",
            "Tenir un agenda des crises"
        ],
        'couleur': 'green'
    },

    # Valeur par d√©faut pour les maladies non sp√©cifi√©es
    **{
        maladie: {
            'niveau': '√† √©valuer',
            'conseils': [
                "Consultation m√©dicale recommand√©e",
                "Bilan compl√©mentaire n√©cessaire",
                "Surveillance des sympt√¥mes"
            ],
            'couleur': 'cyan'
        }
        for maladie in maladies if maladie not in [
            'AVC', 'Pancreatite', 'Pneumonie', 'Asthme', 'Diabete', 'Hypertension',
            'Cancer du foie', 'Maladie de Parkinson', "Maladie d'Alzheimer",
            'Grippe', 'Bronchite', 'Infection urinaire', 'Rhume', 'Eczema', 'Migraine'
        ]
    }
}


def preparer_donnees(reponses):
    """Transforme les r√©ponses utilisateur en donn√©es compatibles avec le mod√®le"""
    try:
        # Chargement des encodeurs
        gender_encoder = joblib.load('gender_encoder.pkl')
        bp_encoder = joblib.load('bp_encoder.pkl')
        chol_encoder = joblib.load('chol_encoder.pkl')

        # Normalisation des entr√©es
        genre_norm = reponses['Genre'].capitalize()
        tension_norm = reponses['Tension arterielle'].capitalize().replace('√©', 'e').replace('√©e', 'e')
        chol_norm = reponses['Niveau de cholesterol'].capitalize().replace('√©', 'e')

        # Gestion des valeurs inconnues
        if genre_norm not in gender_encoder.classes_:
            genre_norm = 'Homme'  # Valeur par d√©faut
        if tension_norm not in bp_encoder.classes_:
            tension_norm = 'Normal'
        if chol_norm not in chol_encoder.classes_:
            chol_norm = 'Normal'

        # Cr√©ation du DataFrame
        data = {
            'Fievre': int(reponses.get('Fievre', 0)),
            'Toux': int(reponses.get('Toux', 0)),
            'Fatigue': int(reponses.get('Fatigue', 0)),
            'Difficulte respiratoire': int(reponses.get('Difficulte respiratoire', 0)),
            'Age': int(reponses.get('Age', 30)),  # Valeur par d√©faut
            'Genre': gender_encoder.transform([genre_norm])[0],
            'Tension arterielle': bp_encoder.transform([tension_norm])[0],
            'Niveau de cholesterol': chol_encoder.transform([chol_norm])[0]
        }

        return pd.DataFrame([data])

    except Exception as e:
        print(f"Erreur lors de la pr√©paration des donn√©es: {str(e)}")
        raise


def generer_recommandation(maladie, probabilite):
    """G√©n√®re des recommandations m√©dicales bas√©es sur la maladie pr√©dite et la probabilit√©"""

    # Seuil de confiance minimal
    if probabilite < 0.6:
        return {
            'urgence': "incertain",
            'message': "‚ö†Ô∏è R√©sultat peu certain - Consultez un m√©decin pour confirmation",
            'conseils': ["Repos en attendant la consultation", "Surveillance des sympt√¥mes"]
        }

    # R√©cup√©ration du niveau de gravit√© (avec valeur par d√©faut 'mod√©r√©')
    niveau_gravite = gravite_maladies.get(maladie, {}).get('niveau', 'mod√©r√©')

    # Structure de base pour les recommandations
    recommandation = {
        'maladie': maladie,
        'probabilite': probabilite,
        'gravite': niveau_gravite
    }

    # Messages prioritaires selon la gravit√©
    if niveau_gravite == 'urgence absolue':
        recommandation.update({
            'urgence': "imm√©diate",
            'message': "üî¥ URGENCE VITALE: Appelez le 15 imm√©diatement",
            'conseils': gravite_maladies.get(maladie, {}).get('conseils', [
                "Ne pas prendre de m√©dicaments sans avis m√©dical",
                "Pr√©parer les ant√©c√©dents m√©dicaux pour les secours"
            ])
        })
    elif niveau_gravite == 'grave':
        recommandation.update({
            'urgence': "√©lev√©e",
            'message': "üü† URGENCE: Consultez aux urgences dans l'heure",
            'conseils': gravite_maladies.get(maladie, {}).get('conseils', [
                "Arr√™t de toute activit√© physique",
                "Surveillance constante des sympt√¥mes"
            ])
        })
    elif niveau_gravite == 'chronique grave':
        recommandation.update({
            'urgence': "sp√©cialis√©e",
            'message': "üü° CONSULTATION SP√âCIALIS√âE: Prise en charge urgente n√©cessaire",
            'conseils': gravite_maladies.get(maladie, {}).get('conseils', [
                "Contacter votre sp√©cialiste habituel",
                "Ne pas interrompre les traitements en cours"
            ])
        })
    elif niveau_gravite == 'mod√©r√©':
        recommandation.update({
            'urgence': "consultation",
            'message': "üîµ CONSULTATION: Prenez RDV sous 48h",
            'conseils': gravite_maladies.get(maladie, {}).get('conseils', [
                "Repos jusqu'√† la consultation",
                "Antalgiques si n√©cessaire (parac√©tamol)"
            ])
        })
    elif niveau_gravite == 'l√©ger':
        recommandation.update({
            'urgence': "ambulatoire",
            'message': "üü¢ SOINS √Ä DOMICILE: Traitement symptomatique possible",
            'conseils': gravite_maladies.get(maladie, {}).get('conseils', [
                "Hydratation abondante",
                "Surveillance de l'√©volution"
            ])
        })
    else:  # Cas par d√©faut
        recommandation.update({
            'urgence': "√† √©valuer",
            'message': "‚ÑπÔ∏è CONSULTATION RECOMMAND√âE: √âvaluation m√©dicale n√©cessaire",
            'conseils': gravite_maladies.get(maladie, {}).get('conseils', [
                "Tenir un journal des sympt√¥mes",
                "Consulter si aggravation"
            ])
        })

    # Ajout des conseils sp√©cifiques en compl√©ment
    conseils_specifiques = {
        'Asthme': ["V√©rifiez la date de p√©remption de votre bronchodilatateur"],
        'Diabete': ["Contr√¥le glyc√©mique avant chaque repas"],
        'Hypertension': ["Mesure tensionnelle matin et soir"],
        'Grippe': ["Isolement recommand√© pendant 5 jours"],
        'Pneumonie': ["Surveillance de la temp√©rature 3x/jour"],
        # ... autres conseils sp√©cifiques
    }

    if maladie in conseils_specifiques:
        recommandation['conseils'].extend(conseils_specifiques[maladie])

    return recommandation


def afficher_recommandation(recommandation):
    """Affiche de mani√®re structur√©e les recommandations"""

    print(f"\n=== RECOMMANDATIONS POUR {recommandation['maladie'].upper()} ===")
    print(f"Probabilit√©: {recommandation['probabilite'] * 100:.1f}%")
    print(f"Niveau de gravit√©: {recommandation['gravite'].upper()}")

    # Affichage color√© selon l'urgence
    if recommandation['urgence'] in ["imm√©diate", "√©lev√©e"]:
        print(colored(recommandation['message'], 'red', attrs=['bold']))
    elif recommandation['urgence'] == "sp√©cialis√©e":
        print(colored(recommandation['message'], 'yellow', attrs=['bold']))
    else:
        print(colored(recommandation['message'], 'green'))

    print("\nCONSEILS M√âDICAUX:")
    for i, conseil in enumerate(recommandation['conseils'], 1):
        print(f"{i}. {conseil}")

    # Message compl√©mentaire selon la gravit√©
    if recommandation['urgence'] == "imm√©diate":
        print(colored("\nNE TARDEZ PAS - COMPOSEZ LE 15 IMM√âDIATEMENT", 'red', attrs=['bold', 'blink']))
    elif recommandation['urgence'] == "√©lev√©e":
        print(colored("\nD√©placez-vous aux urgences les plus proches", 'yellow', attrs=['bold']))


def diagnostic_complet(model, input_data):
    """
    Effectue un diagnostic m√©dical complet avec :
    - Pr√©diction principale
    - Top 5 des diagnostics possibles
    - Recommandations adapt√©es
    - Conseils sp√©cifiques
    """

    # Dictionnaire de correspondance index -> maladie
    idx_to_maladie = {i: maladie for i, maladie in enumerate(maladies)}

    try:
        # Pr√©diction et probabilit√©s
        probas = model.predict_proba(input_data)[0]
        top_5_idx = np.argsort(probas)[-5:][::-1]  # Indices des 5 meilleures pr√©dictions

        # Diagnostic principal
        diagnostic_principal = idx_to_maladie[model.predict(input_data)[0]]
        confiance_principale = max(probas)

        # Structure des r√©sultats
        results = {
            'diagnostic': diagnostic_principal,
            'confiance': float(confiance_principale),
            'top_5': [(idx_to_maladie[idx], float(probas[idx])) for idx in top_5_idx],
            'recommandation': None,
            'conseils': None,
            'gravite': None  # Initialisation ajout√©e
        }

        # Seuil de confiance ajustable
        seuil_confiance = 0.6  # 60% de confiance minimum

        if confiance_principale < seuil_confiance:
            results['diagnostic'] = 'Bonne sant√©'
            results['confiance'] = 1 - confiance_principale

        # G√©n√©ration des recommandations
        reco = generer_recommandation(results['diagnostic'], results['confiance'])
        results['recommandation'] = reco['message']
        results['conseils'] = reco['conseils']
        results['gravite'] = reco.get('urgence', '√† √©valuer')  # Modification pour plus de robustesse

        return results

    except Exception as e:
        print(colored(f"Erreur lors du diagnostic : {str(e)}", 'red'))
        return {
            'erreur': str(e),
            'diagnostic': 'Ind√©termin√©',
            'confiance': 0.0,
            'gravite': 'inconnue'  # Valeur par d√©faut ajout√©e
        }


def diagnostic_complet(model, input_data):
    """
    Effectue un diagnostic m√©dical complet avec :
    - Pr√©diction principale
    - Top 5 des diagnostics possibles
    - Recommandations adapt√©es
    - Conseils sp√©cifiques
    """

    # Dictionnaire de correspondance index -> maladie
    idx_to_maladie = {i: maladie for i, maladie in enumerate(maladies)}

    try:
        # Pr√©diction et probabilit√©s
        probas = model.predict_proba(input_data)[0]
        top_5_idx = np.argsort(probas)[-5:][::-1]  # Indices des 5 meilleures pr√©dictions

        # Diagnostic principal
        diagnostic_principal = idx_to_maladie[model.predict(input_data)[0]]
        confiance_principale = max(probas)

        # Structure des r√©sultats
        results = {
            'diagnostic': diagnostic_principal,
            'confiance': float(confiance_principale),
            'top_5': [(idx_to_maladie[idx], float(probas[idx])) for idx in top_5_idx],
            'recommandation': None,
            'conseils': None,
            'gravite': None  # Initialisation ajout√©e
        }

        # Seuil de confiance ajustable
        seuil_confiance = 0.6  # 60% de confiance minimum

        if confiance_principale < seuil_confiance:
            results['diagnostic'] = 'Bonne sant√©'
            results['confiance'] = 1 - confiance_principale

        # G√©n√©ration des recommandations
        reco = generer_recommandation(results['diagnostic'], results['confiance'])
        results['recommandation'] = reco['message']
        results['conseils'] = reco['conseils']
        results['gravite'] = reco.get('urgence', '√† √©valuer')  # Modification pour plus de robustesse

        return results

    except Exception as e:
        print(colored(f"Erreur lors du diagnostic : {str(e)}", 'red'))
        return {
            'erreur': str(e),
            'diagnostic': 'Ind√©termin√©',
            'confiance': 0.0,
            'gravite': 'inconnue'  # Valeur par d√©faut ajout√©e
        }


def afficher_diagnostic(results):
    """Affiche les r√©sultats du diagnostic de mani√®re claire et structur√©e"""

    print("\n" + "=" * 50)
    print(colored(" R√âSULTATS DU DIAGNOSTIC M√âDICAL ", 'cyan', attrs=['bold']))
    print("=" * 50)

    # Gestion des erreurs
    if 'erreur' in results:
        print(colored("\n‚ùå ERREUR DE DIAGNOSTIC", 'red'))
        print(f"Message : {results['erreur']}")
        return

    # Affichage du diagnostic principal
    if results['diagnostic'] == 'Bonne sant√©':
        print(colored("\nüéâ DIAGNOSTIC : BONNE SANT√â", 'green', attrs=['bold']))
        print(f"Confiance du mod√®le : {results['confiance'] * 100:.1f}%")
    else:
        print(f"\nüîç DIAGNOSTIC PRINCIPAL : {colored(results['diagnostic'], 'yellow', attrs=['bold'])}")
        print(f"Confiance du mod√®le : {results['confiance'] * 100:.1f}%")
        # Ajout d'une v√©rification pour 'gravite'
        if 'gravite' in results:
            print(f"Niveau de gravit√© : {results['gravite'].upper()}")

    # Affichage des recommandations avec v√©rification
    if 'recommandation' in results and results['recommandation']:
        print(colored("\nüí° RECOMMANDATION :", 'blue'))
        if "URGENCE" in results['recommandation']:
            print(colored(results['recommandation'], 'red', attrs=['bold']))
        else:
            print(results['recommandation'])

    # Affichage des conseils avec v√©rification
    if 'conseils' in results and results['conseils']:
        print(colored("\nüìå CONSEILS M√âDICAUX :", 'blue'))
        for i, conseil in enumerate(results['conseils'], 1):
            print(f"{i}. {conseil}")

    # Affichage du top 5 avec v√©rification
    if 'top_5' in results and len(results['top_5']) > 1:
        print(colored("\nüîé TOP 5 DES DIAGNOSTICS POSSIBLES :", 'magenta'))
        for maladie, proba in results['top_5']:
            print(f"- {maladie} ({proba * 100:.1f}%)")

    print("\n" + "=" * 50)


@app.route('/')
def home():
    return render_template('index.html')


@app.route('/about-us')
def apropos():
    return render_template("about-us.html")


@app.route('/blog')
def conseil():
    return render_template("blog.html")


@app.route('/contact')
def contact():
    return render_template("contact.html")


@app.route('/test', methods=["POST", "GET"])
def testons():
    #resultat_diagnostic = None
    if request.method == "POST":

        #R√©cup√©ration des donnees du formulaire
        fievre = int(request.form.get("fievre", 0))
        toux = int(request.form.get("toux", 0))
        fatigue = int(request.form.get("fatigue", 0))
        difficulte_respiratoire = int(request.form.get("difficulte_respiratoire", 0))
        age = int(request.form.get("Age"))
        Genre = request.form.get("Genre")
        tension_arterielle = request.form.get("tension_arterielle")
        niveau_cholesterol = request.form.get("niveau_de_cholesterol")

        # Analyse des sympt√¥mes
        message = "Votre √©tat semble normal."
        if fievre or toux or fatigue or difficulte_respiratoire:
            message = "Vous pr√©sentez des sympt√¥mes. Consultez un m√©decin si votre √©tat s‚Äôaggrave."
        if difficulte_respiratoire or (age > 60 and (tension_arterielle == "√©lev√©" or niveau_cholesterol == "√©lev√©")):
            message = "Consultez un m√©decin imm√©diatement !"""

        reponses = request.form.to_dict()

        donnees_utilisateur = preparer_donnees(reponses)
        donnees_utilisateur.columns = donnees_utilisateur.columns.str.replace(' ', '_')

        resultat = diagnostic_complet(model, donnees_utilisateur)

        return render_template('test.html', resultat = resultat)





    return render_template("test.html")


@app.route('/service')
def board():
    return render_template("services.html")


if __name__ == "__main__":
    app.run(debug=True)
